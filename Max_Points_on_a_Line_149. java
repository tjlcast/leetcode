/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    
    String __author__ = "tangjialiang" ;
    String __V__ = "success_V" ;
    
    public int maxPoints(Point[] points) {
        return Solution1.work(points) ;
    }
}


class Solution1 {
    
    public static int work(Point[] points) {
        
        int ans = 0 ;
        
        for(int i=0; i<points.length; i++) {
            
            Point curPoint = points[i] ;
            int sameNum = 0 ;
            HashMap<Double, Integer> recorder = new HashMap<Double, Integer>() ;
            
            for(int j=0; j<points.length; j++) {
                Point tempPoint = points[j] ;
                
                if (isSame(curPoint, tempPoint)) {
                    sameNum++ ;
                } else {
                    double slope = getSlope(curPoint, tempPoint) ;
                    
                    Integer tempNum = recorder.get(slope) ;
                    if (tempNum == null) {
                        recorder.put(new Double(slope), new Integer(1)) ;
                    } else {
                        recorder.put(new Double(slope), new Integer(tempNum+1)) ;
                    }
                }
            }
            
            int maxNum = 0 ;
            for(Integer num: recorder.values()) {
                maxNum = (num+sameNum > maxNum) ? (num+sameNum) : (maxNum) ;
            }
            if (maxNum == 0) {
                maxNum = sameNum ;
            }
            
            
            if (maxNum > ans) {
                ans = maxNum ;
            }
            
        }
        
        return ans ;
    }
    
    public static boolean isSame(Point a, Point b) {
        if (a.x==b.x && a.y==b.y) {
            return true ;
        }
        return false ;
    }
    
    public static double getSlope(Point a, Point b) {
        if (a.x == b.x) {
            return 0 ;
        }
        return ((double)(a.y - b.y) / (double)(a.x - b.x)) ;
    }
}

public class Solution {
    
    String __author__ = "tangjialiang" ;
    String __V__ = "success_V" ;
    
    private int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}} ;
    private int d = 0 ;
    private int[][] isVisited ;
    private ArrayList<Integer> ans = new ArrayList<Integer>() ;
    private int rows ;
    private int cols ;
    private int x = 0 , y = 0 ;
    private int[][] matrix ;
    
    private void init() {
        isVisited = new int[matrix.length][matrix[0].length] ;
    }
    
    private boolean isChangeD() {
        int nextY = directions[d][0]+y ;
        int nextX = directions[d][1]+x ;
        
        if (nextX>=rows || nextY>=cols || nextX<0 || nextY<0 || isVisited[nextX][nextY]==1) {
            return true ;
        }
        return false ;
    }
    
    private boolean nextStep() {
        
        if (isChangeD()) {
            d = (d+1)%4 ;
            System.out.println("new d: " + d) ;
        }
        y += directions[d][0] ;
        x += directions[d][1] ;
        System.out.println("x: "+x+" y: " + y) ;
        if (x>=rows || y>=cols || x<0 || y<0 || isVisited[x][y]==1) {
            return false ;
        }
        ans.add(new Integer(matrix[x][y])) ;
        isVisited[x][y] = 1 ;
        return true ;
    }
    
    public List<Integer> spiralOrder(int[][] matrix) {
        this.matrix = matrix ;
        rows = matrix.length ;
        if (rows==0) return ans ;
        cols = matrix[0].length ;
         
        init() ;
        ans.add(new Integer(matrix[0][0])) ;
        isVisited[0][0] = 1 ;
        if (rows==1 && cols==1) return ans ;
        while(nextStep()) {}
        return (List)ans ;
    }
    
    
}

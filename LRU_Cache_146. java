
public class LRUCache {

    private String __author__ = "tangjialiang" ;
    private String __V__ = "code_V" ;
    
    private LinkedList<Integer> queue
    private HashMap<Integer, Integer> cache ;
    private int cacheSize ;
    
    public LRUCache(int capacity) {
        cache = new HashMap<String Integer>() ;
        cacehSize = capacity ;
        queue = new Queue<String>() ;
    }
    
    public int get(int key) {
        for(int i=0; i<queue.length; i++) {
            if (queue[i] == key) {
                queue.remove(i) ;
                break ;
            }
        }
        queue.pushFirst(Integer(key)) ;
        return cache[key] ;
    }
    
    public void set(int key, int value) {
        if (queue.length < cacheSize) {
            this.queue.pushFirst(Integer(key)) ;
            HashMap[Integer(key)] = value ;
            cacheSize++ ;
        } else {
            this.queue.pushFirst(Integer(key)) ;
            removeKey = this.queue.removeLast() ;
            this.queue.pushFirst(Integer(key)) ;
            
            this.cache.remove(removekey) ;
            this.cache[Integer(key)] = value ;
        }
    }
}
